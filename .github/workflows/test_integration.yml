name: Integration Test

on:
  pull_request:
    branches: [ "prod" ]

jobs:
  integration:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Compose
        run: |
          echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> docker-compose.test.yml
          echo "SQL_DATABASE=${{ secrets.SQL_DATABASE }}" >> docker-compose.test.yml
          echo "SQL_USER=${{ secrets.SQL_USER }}" >> docker-compose.test.yml
          echo "SQL_PASSWORD=${{ secrets.SQL_PASSWORD }}" >> docker-compose.test.yml
          echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> docker-compose.test.yml
          echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> docker-compose.test.yml
          echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}" >> docker-compose.test.yml
        env:
          DOCKER_COMPOSE_CONFIG: ${{ secrets.DOCKER_COMPOSE_CONFIG }}
          ANOTHER_SECRET: ${{ secrets.ANOTHER_SECRET }}
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          SQL_DATABASE: ${{ secrets.SQL_DATABASE }}
          SQL_USER: ${{ secrets.SQL_USER }}
          SQL_PASSWORD: ${{ secrets.SQL_PASSWORD }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}

      - name: build and run Docker Compose
        run: |
          docker compose -f docker-compose.test.yml up -d --build
        continue-on-error: false
      
      #- name: Run integration tests
      #  run: |
      #    docker compose -f docker-compose.test.yml exec backend npm run test:integration
      #  continue-on-error: false

      - name: cleanup
        run: |
          docker compose -f docker-compose.test.yml down
        continue-on-error: true